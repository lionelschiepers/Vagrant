# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # https://docs.vagrantup.com.

  config.vm.define "kub" do |kub|

    kub.vm.provider "vmware_desktop" do |vm_kub|
      vm_kub.gui = false
      vm_kub.vmx['numvcpus'] = '4' 
      vm_kub.vmx['memsize'] = '8192'
      vm_kub.ssh_info_public = true
    end


    # search boxes at https://vagrantcloud.com/search.
    kub.vm.box = "generic/ubuntu2204"
    kub.vm.hostname = "k8s-masternode"
=begin
    kub.vm.network "private_network", ip: "192.168.124.200"
=end
    kub.vm.synced_folder "../data", "/vagrant_data"
=begin
    kub.vm.network "forwarded_port", guest: 8001, host: 8001
    kub.vm.network "forwarded_port", guest: 6443, host: 6443
    kub.vm.network "forwarded_port", guest: 30000, host: 30000
    kub.vm.network "forwarded_port", guest: 30001, host: 30001
    kub.vm.network "forwarded_port", guest: 30002, host: 30002
    kub.vm.network "forwarded_port", guest: 30003, host: 30003
    kub.vm.network "forwarded_port", guest: 30004, host: 30004 # grafana
=end

=begin
    # Expose NodePort ports
    for p in 30000..30100
      kub.vm.network "forwarded_port", guest: p, host: p, protocol: "tcp"
    end
=end

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"

    kub.vm.provision "shell", inline: <<-SHELL
		export DEBIAN_FRONTEND=noninteractive

		sudo sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
		sudo swapoff -a

    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg # allow unprivileged APT programs to read this keyring
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
    sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list   # helps tools such as command-not-found to work correctly

    apt-get update -y
		# sudo apt-get upgrade -y
		apt-get install -y apt-transport-https ca-certificates curl net-tools gnupg
		apt-get install -y kubelet kubeadm kubectl kubernetes-cni
		apt-mark hold kubelet kubeadm kubectl
		
		sudo tee /etc/modules-load.d/k8s.conf<<EOF
overlay
br_netfilter
EOF
		sudo modprobe overlay
		sudo modprobe br_netfilter
		
		sudo tee /etc/sysctl.d/k8s.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
		
		sudo sysctl --system

# containerd
		apt-get update
		apt-get install -y ca-certificates curl gnupg lsb-release

		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
		echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

		apt-get remove containerd 
		apt-get update
		apt-get install -y containerd.io
		rm /etc/containerd/config.toml
		
		containerd config default | sudo tee /etc/containerd/config.toml
    sudo sed -i 's/pause:3.8/pause:3.10/g' /etc/containerd/config.toml

#		sudo sed -i 's/systemd_cgroup \= false/systemd_cgroup \= true/g' /etc/containerd/config.toml
		sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
		
#		sudo bash << EOF
#containerd config default > /etc/containerd/config.toml
#EOF

#		sudo tee /etc/containerd/config.toml<<EOF
#version = 2
#
#[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
#	SystemdCgroup = true
#EOF
	
		sudo systemctl restart containerd
		sudo ctr plugins ls
		
		# sudo apt-get install -y docker.io
		# sudo systemctl enable docker
		# sudo systemctl start docker
		# sudo systemctl status docker


		# sudo apt-get upgrade -y
		sudo systemctl enable kubelet
		sudo kubeadm config images pull
		sudo kubeadm init --pod-network-cidr=10.244.0.0/16
		# --upload-certs --control-plane-endpoint=k8s-masternode

		# configure for root user
		mkdir -p "$HOME"/.kube
		sudo cp -i /etc/kubernetes/admin.conf "$HOME"/.kube/config
		sudo chown "$(id -u)":"$(id -g)" "$HOME"/.kube/config

		# allow to run pod on the control plane because we are in a testing environmnet.
		sudo kubectl taint nodes k8s-masternode node-role.kubernetes.io/master-
		sudo kubectl taint nodes k8s-masternode node-role.kubernetes.io/control-plane-
		sudo kubectl taint nodes k8s-masternode dedicated=special-user:NoSchedule-

    kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/tigera-operator.yaml
    curl https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/custom-resources.yaml -O
    kubectl create -f custom-resources.yaml
    #watch kubectl get pods -n calico-system
    kubectl get pods -n calico-system
	
    systemctl restart containerd
		systemctl restart kubelet

    # configure for vagrant user also.		
		sudo -i -u vagrant bash << EOF
			whoami
			pwd
			mkdir -p /home/vagrant/.kube
			sudo cp /etc/kubernetes/admin.conf /home/vagrant/.kube/config
			sudo chown 1000:1000 /home/vagrant/.kube/config
EOF

		#sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
		
		# https://stackoverflow.com/questions/72844687/invalid-capacity-0-on-image-filesystem-lens-id-kubernetes
		#systemctl restart containerd
		#systemctl restart kubelet

		# https://devopscube.com/setup-grafana-kubernetes/
		#sudo kubectl apply -f /vagrant_data/kubernetes/grafana/grafana-datasource-config.yaml
		#sudo kubectl apply -f /vagrant_data/kubernetes/grafana/deployment.yaml
		#sudo kubectl apply -f /vagrant_data/kubernetes/grafana/service.yaml

    SHELL

=begin
    kub.vm.provision "shell", inline: <<-SHELL
      # dnf update -y
      dnf install mc wget net-tools -y -q

      # https://levelup.gitconnected.com/local-kubernetes-development-using-vagrant-and-k3s-547bd5687a7f
      echo "Installing k3s"
      curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--disable traefik" sh -
      echo "k3s installed"

      # https://0to1.nl/post/k3s-kubectl-permission/
      sudo mkdir ~/.kube
      sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config 
      sudo chown $USER ~/.kube/config 
      sudo chmod 644 ~/.kube/config
      export KUBECONFIG=~/.kube/config

      echo "Installing Istio"
      curl -L https://istio.io/downloadIstio | sh -
      read istiofolder < <(ls -d istio-*)
      ./$istiofolder/bin/istioctl install --set profile=demo -y
      /usr/local/bin/kubectl label namespace default istio-injection=enabled
      /usr/local/bin/kubectl get svc istio-ingressgateway -n istio-system

      echo "Waiting deployment is finished"
      /usr/local/bin/kubectl wait deployment -n istio-system istiod --for condition=Available=True --timeout=300s
      /usr/local/bin/kubectl wait deployment -n istio-system istio-ingressgateway --for condition=Available=True --timeout=300s
      /usr/local/bin/kubectl wait deployment -n istio-system istio-egressgateway --for condition=Available=True --timeout=300s

      export INGRESS_HOST=$(/usr/local/bin/kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      export INGRESS_PORT=$(/usr/local/bin/kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
      export SECURE_INGRESS_PORT=$(/usr/local/bin/kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')
      export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

      # https://istio.io/latest/docs/examples/bookinfo/
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.16/samples/bookinfo/platform/kube/bookinfo.yaml
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.16/samples/bookinfo/networking/bookinfo-gateway.yaml

      echo "Installating Kiali"
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.16/samples/addons/kiali.yaml
      /usr/local/bin/kubectl apply -f /vagrant_data/kubernetes/kiali/istio.yaml
      
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/prometheus.yaml

      echo "Waiting deployment is finished"
      /usr/local/bin/kubectl wait deployment -n istio-system kiali --for condition=Available=True --timeout=300s

      echo "Installing Dashboard"
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
      /usr/local/bin/kubectl apply -f /vagrant_data/kubernetes/dashboard/dashboard-service.yaml

      echo "Creating admin user"
      # https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengaddingserviceaccttoken.htm
      /usr/local/bin/kubectl apply -f /vagrant_data/kubernetes/dashboard/admin-user.yaml
      /usr/local/bin/kubectl -n kube-system describe secret $(/usr/local/bin/kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')

      
	  echo "Installing Prometheus"
      /usr/local/bin/kubectl create namespace monitoring
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/prometheus/clusterRole.yaml
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/prometheus/config-map.yaml
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/prometheus/prometheus-deployment.yaml
      echo "Waiting deployment is finished"
      /usr/local/bin/kubectl wait deployment -n monitoring prometheus-deployment --for condition=Available=True --timeout=120s
      /usr/local/bin/kubectl get deployments --namespace=monitoring
      /usr/local/bin/kubectl get pods --namespace=monitoring
      echo "Prometheus installed"

      /usr/local/bin/kubectl get all --all-namespaces
      /usr/local/bin/kubectl cluster-info

      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/prometheus/prometheus-service.yaml --namespace=monitoring
      /usr/local/bin/kubectl get services -n monitoring

      /usr/local/bin/kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml
      /usr/local/bin/kubectl wait deployment nginx-deployment --for condition=Available=True --timeout=120s
      /usr/local/bin/kubectl apply -f /vagrant_data/kubernetes/nginx-sample/nginx-service.yaml

      # https://devopscube.com/setup-grafana-kubernetes/
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/grafana/grafana-datasource-config.yaml
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/grafana/deployment.yaml
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/grafana/service.yaml
      # retrieve podname in shell
      # read podname ready status < <(/usr/local/bin/kubectl get pods -o wide -n monitoring | grep grafana)
	  
	  : <<'ENDCOMMENT'
      ENDCOMMENT
    SHELL
=end
  end
end