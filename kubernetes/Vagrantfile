# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.vm.define "kub" do |kub|

    kub.vm.provider "vmware_desktop" do |vm_kub|
      vm_kub.gui = false
      vm_kub.vmx['numvcpus'] = '4' 
      vm_kub.vmx['memsize'] = '8192'
      vm_kub.ssh_info_public = true
    end

    kub.vm.provider "virtualbox" do |vb_kub|
      vb_kub.gui = false
      vb_kub.memory = 8192
      vb_kub.cpus = 2
      vb_kub.customize ["modifyvm", :id, "--vram", "32"]
    end

    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://vagrantcloud.com/search.
    kub.vm.box = "rockylinux/9"
    kub.vm.hostname = "kubernetes-vm"
    kub.vm.network "private_network", ip: "192.168.91.200"
    kub.vm.synced_folder "../data", "/vagrant_data"
    kub.vm.network "forwarded_port", guest: 8001, host: 8001
    kub.vm.network "forwarded_port", guest: 6443, host: 6443
    kub.vm.network "forwarded_port", guest: 30000, host: 30000
    kub.vm.network "forwarded_port", guest: 30001, host: 30001
    kub.vm.network "forwarded_port", guest: 30002, host: 30002
    kub.vm.network "forwarded_port", guest: 30003, host: 30003
    kub.vm.network "forwarded_port", guest: 30004, host: 30004 # grafana
=begin
    # Expose NodePort ports
    for p in 30000..30100
      kub.vm.network "forwarded_port", guest: p, host: p, protocol: "tcp"
    end
=end

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"

=begin
    # update virtualbox additions
    kub.vm.provision "shell", inline: <<-SHELL
      dnf install epel-release -y
      dnf update --refresh -y
      dnf install dkms kernel-devel kernel-headers gcc make bzip2 perl elfutils-libelf-devel -y
    SHELL

    kub.vm.provision :reload

    kub.vm.provision "shell", inline: <<-SHELL
      curl --progress-bar --remote-name https://download.virtualbox.org/virtualbox/7.0.4/VBoxGuestAdditions_7.0.4.iso
      mv VBoxGuestAdditions_7.0.4.iso /tmp/
      sudo mount /tmp/VBoxGuestAdditions_7.0.4.iso /run/media/
      dnf install libX11 libXt libXext libXmu -y
      sudo /run/media/VBoxLinuxAdditions.run
      echo "VirtualBox additions updated"
    SHELL

    kub.vm.provision :reload
=end

    kub.vm.provision "shell", inline: <<-SHELL
      # dnf update -y
      dnf install mc wget net-tools -y -q

      # https://levelup.gitconnected.com/local-kubernetes-development-using-vagrant-and-k3s-547bd5687a7f
      echo "Installing k3s"
      curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="--disable traefik" sh -
      echo "k3s installed"

      # https://0to1.nl/post/k3s-kubectl-permission/
      sudo mkdir ~/.kube
      sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config 
      sudo chown $USER ~/.kube/config 
      sudo chmod 644 ~/.kube/config
      export KUBECONFIG=~/.kube/config

      echo "Installing Istio"
      curl -L https://istio.io/downloadIstio | sh -
      read istiofolder < <(ls -d istio-*)
      ./$istiofolder/bin/istioctl install --set profile=demo -y
      /usr/local/bin/kubectl label namespace default istio-injection=enabled
      /usr/local/bin/kubectl get svc istio-ingressgateway -n istio-system

      echo "Waiting deployment is finished"
      /usr/local/bin/kubectl wait deployment -n istio-system istiod --for condition=Available=True --timeout=300s
      /usr/local/bin/kubectl wait deployment -n istio-system istio-ingressgateway --for condition=Available=True --timeout=300s
      /usr/local/bin/kubectl wait deployment -n istio-system istio-egressgateway --for condition=Available=True --timeout=300s

      export INGRESS_HOST=$(/usr/local/bin/kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      export INGRESS_PORT=$(/usr/local/bin/kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
      export SECURE_INGRESS_PORT=$(/usr/local/bin/kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')
      export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

      # https://istio.io/latest/docs/examples/bookinfo/
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.16/samples/bookinfo/platform/kube/bookinfo.yaml
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.16/samples/bookinfo/networking/bookinfo-gateway.yaml

      echo "Installating Kiali"
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.16/samples/addons/kiali.yaml
      /usr/local/bin/kubectl apply -f /vagrant_data/kubernetes/kiali/istio.yaml
      
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/addons/prometheus.yaml

      echo "Waiting deployment is finished"
      /usr/local/bin/kubectl wait deployment -n istio-system kiali --for condition=Available=True --timeout=300s

      echo "Installing Dashboard"
      /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
      /usr/local/bin/kubectl apply -f /vagrant_data/kubernetes/dashboard/dashboard-service.yaml

      echo "Creating admin user"
      # https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengaddingserviceaccttoken.htm
      /usr/local/bin/kubectl apply -f /vagrant_data/kubernetes/dashboard/admin-user.yaml
      /usr/local/bin/kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')

      : <<'ENDCOMMENT'      
      echo "Installing Prometheus"
      /usr/local/bin/kubectl create namespace monitoring
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/prometheus/clusterRole.yaml
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/prometheus/config-map.yaml
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/prometheus/prometheus-deployment.yaml
      echo "Waiting deployment is finished"
      /usr/local/bin/kubectl wait deployment -n monitoring prometheus-deployment --for condition=Available=True --timeout=120s
      /usr/local/bin/kubectl get deployments --namespace=monitoring
      /usr/local/bin/kubectl get pods --namespace=monitoring
      echo "Prometheus installed"

      /usr/local/bin/kubectl get all --all-namespaces
      /usr/local/bin/kubectl cluster-info

      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/prometheus/prometheus-service.yaml --namespace=monitoring
      /usr/local/bin/kubectl get services -n monitoring

      /usr/local/bin/kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml
      /usr/local/bin/kubectl wait deployment nginx-deployment --for condition=Available=True --timeout=120s
      /usr/local/bin/kubectl apply -f /vagrant_data/kubernetes/nginx-sample/nginx-service.yaml
      ENDCOMMENT

      # https://devopscube.com/setup-grafana-kubernetes/
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/grafana/grafana-datasource-config.yaml
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/grafana/deployment.yaml
      /usr/local/bin/kubectl create -f /vagrant_data/kubernetes/grafana/service.yaml
      # retrieve podname in shell
      # read podname ready status < <(kubectl get pods -o wide -n monitoring | grep grafana)
    SHELL
  end
  
  config.vm.define "es" do |elasticsearch|
    elasticsearch.vm.provider "vmware_desktop" do |vm_es|
      vm_es.gui = false
      vm_es.vmx['numvcpus'] = '2' 
      vm_es.vmx['memsize'] = '3072'
      vm_es.ssh_info_public = true
    end

    elasticsearch.vm.box = "rockylinux/9"
    elasticsearch.vm.hostname = "elasticsearch-vm"
    elasticsearch.vm.network "private_network", ip: "192.168.91.100"
    elasticsearch.vm.synced_folder "../data", "/vagrant_data"
    elasticsearch.vm.network "forwarded_port", guest: 9200, host: 9200
    elasticsearch.vm.network "forwarded_port", guest: 9300, host: 9300

    elasticsearch.vm.provision "shell", inline: <<-SHELL
      dnf install wget mc net-tools -y -q
      # dnf update -y
	  
      curl --progress-bar --remote-name --location https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.5.3-x86_64.rpm
      curl --progress-bar --remote-name --location https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.5.3-x86_64.rpm.sha512
      sha512sum -c elasticsearch-8.5.3-x86_64.rpm.sha512 
      sudo rpm --install elasticsearch-8.5.3-x86_64.rpm

      sudo cp /vagrant_data/elasticsearch.yml /etc/elasticsearch/elasticsearch.yml
      sudo systemctl daemon-reload
      sudo systemctl enable elasticsearch.service
      sudo systemctl start elasticsearch.service

      sudo /usr/share/elasticsearch/bin/elasticsearch-reset-password -a -b -s -u elastic > /vagrant_data/elasticsearch-password
      
      sudo /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana > /vagrant_data/kibana-enrollment
    SHELL
	
  end

  config.vm.define "kibana" do |kibana|
    kibana.vm.provider "vmware_desktop" do |vm_kib|
      vm_kib.gui = false
      vm_kib.vmx['numvcpus'] = '2' 
      vm_kib.vmx['memsize'] = '3072'
      vm_kib.ssh_info_public = true
    end

    kibana.vm.box = "rockylinux/9"
    kibana.vm.hostname = "kibana-vm"
    kibana.vm.network "private_network", ip: "192.168.91.101"
    kibana.vm.synced_folder "../data", "/vagrant_data"
    kibana.vm.network "forwarded_port", guest: 5601, host: 5601

    kibana.vm.provision "shell", inline: <<-SHELL
      dnf install wget mc vim net-tools -y -q
      # dnf update -y

      sudo update-crypto-policies --set DEFAULT:SHA1
      sudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch

      sudo cat <<EOT >> /etc/yum.repos.d/kibana.repo
[kibana-8.x]
name=Kibana repository for 8.x packages
baseurl=https://artifacts.elastic.co/packages/8.x/yum
gpgcheck=1
gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
enabled=1
autorefresh=1
type=rpm-md
EOT

      sudo dnf install -y kibana
    
      sudo cp /vagrant_data/kibana.yml /etc/kibana/kibana.yml

      es_enroll=$(cat /vagrant_data/kibana-enrollment)
      sudo /usr/share/kibana/bin/kibana-setup --enrollment-token $es_enroll

      sudo systemctl daemon-reload
      sudo systemctl enable kibana.service
      sudo systemctl start kibana.service
    SHELL
  end
end